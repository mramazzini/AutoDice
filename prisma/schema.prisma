// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum AbilityScore {
  STR
  CON
  DEX
  INT
  WIS
  CHA
}

enum Skill {
  ACROBATICS
  ANIMAL_HANDLING
  ARCANA
  ATHLETICS
  DECEPTION
  HISTORY
  INSIGHT
  INTIMIDATION
  INVESTIGATION
  MEDICINE
  NATURE
  PERCEPTION
  PERFORMANCE
  PERSUASION
  RELIGION
  SLEIGHT_OF_HAND
  STEALTH
  SURVIVAL
}

enum ArmorTypes {
  LIGHT
  MEDIUM
  HEAVY
  SHIELDS
}

enum WeaponTypes {
  SIMPLE
  MARTIAL
}

enum Size {
  TINY
  SMALL
  MEDIUM
  LARGE
  HUGE
  GARGANTUAN
}

enum Alignment {
  LAWFUL_GOOD
  NEUTRAL_GOOD
  CHAOTIC_GOOD
  LAWFUL_NEUTRAL
  CHAOTIC_NEUTRAL
  LAWFUL_EVIL
  NEUTRAL_EVIL
  CHAOTIC_EVIL
  LAWFUL
  CHAOTIC
  GOOD
  EVIL
  NEUTRAL
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  name         String?
  password     String
  contentPacks ContentPack[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Character {
  id         Int        @id @default(autoincrement())
  name       String
  class      Class      @relation(fields: [classId], references: [id])
  subClass   SubClass?  @relation(fields: [subClassId], references: [id])
  race       Race?      @relation(fields: [raceId], references: [id])
  subRace    SubRace?   @relation(fields: [subRaceId], references: [id])
  background Background @relation(fields: [backgroundId], references: [id])
  equipment  Equipment  @relation(fields: [equipmentId], references: [id])
  str        Int
  dex        Int
  con        Int
  int        Int
  wis        Int
  cha        Int

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  classId      Int
  subClassId   Int?
  raceId       Int?
  subRaceId    Int?
  backgroundId Int
  equipmentId  Int
}

model Language {
  id           Int         @id @default(autoincrement())
  name         String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  Race         Race?       @relation(fields: [raceId], references: [id])
  raceId       Int?
  Background   Background? @relation(fields: [backgroundId], references: [id])
  backgroundId Int?
}

model Monster {
  id            Int          @id @default(autoincrement())
  name          String
  ContentPack   ContentPack? @relation(fields: [contentPackId], references: [id])
  contentPackId Int?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Spell {
  id            Int          @id @default(autoincrement())
  name          String
  ContentPack   ContentPack? @relation(fields: [contentPackId], references: [id])
  contentPackId Int?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Class {
  // Barbarian, Bard, Cleric, Druid, Fighter, Monk, Paladin, Ranger, Rogue, Sorcerer, Warlock, Wizard etc
  id                  Int            @id @default(autoincrement())
  name                String
  description         String
  hitDie              Int
  armorProficiencies  ArmorTypes[]
  weaponProficiencies WeaponTypes[]
  toolProficiencies   Tools[]
  savingThrows        AbilityScore[]
  skillChoiceCount    Int
  skillChoices        Skill[]
  startingEquipment   Equipment[]
  ContentPack         ContentPack?   @relation(fields: [contentPackId], references: [id])
  contentPackId       Int?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  SubClass            SubClass[]
  Features            Features[]
  Character           Character[]
}

model SubClass {
  // Secondary class attached to each class with further abilities
  id            Int          @id @default(autoincrement())
  name          String
  class         Class?       @relation(fields: [classId], references: [id])
  classId       Int?
  ContentPack   ContentPack? @relation(fields: [contentPackId], references: [id])
  contentPackId Int?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  Features      Features[]
  Character     Character[]
}

model Features {
  // Abilities that classes gain as they reach certain levels
  id            Int          @id @default(autoincrement())
  name          String
  classId       Int
  class         Class?       @relation(fields: [classId], references: [id])
  SubClass      SubClass?    @relation(fields: [subClassId], references: [id])
  subClassId    Int?
  ContentPack   ContentPack? @relation(fields: [contentPackId], references: [id])
  contentPackId Int?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Background {
  // A characters background which gives them extra proficiencies and equipment
  id                  Int          @id @default(autoincrement())
  name                String
  description         String
  skillChoiceCount    Int
  skillChoices        Skill[]
  languageChoiceCount Int
  languageChoices     Language[]
  equipmentChoices    Equipment[]
  ContentPack         ContentPack? @relation(fields: [contentPackId], references: [id])
  contentPackId       Int?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  Character           Character[]
}

model Feat {
  // A feat that a character can take to give them extra abilities
  id            Int          @id @default(autoincrement())
  name          String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  ContentPack   ContentPack? @relation(fields: [contentPackId], references: [id])
  contentPackId Int?
}

model Equipment {
  // Weapons, Armor, Tools, Items
  id            Int          @id @default(autoincrement())
  name          String
  ContentPack   ContentPack? @relation(fields: [contentPackId], references: [id])
  contentPackId Int?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  Class         Class?       @relation(fields: [classId], references: [id])
  classId       Int?
  Character     Character[]
  Background    Background?  @relation(fields: [backgroundId], references: [id])
  backgroundId  Int?
}

model Race {
  // Human, Elf, Dwarf, Halfling, Dragonborn, Gnome, Half-Elf, Half-Orc, Tiefling etc
  // Describes attributes that each race has like size, speed, or language proficiencies. Traits are custom to an individual race. 
  id            Int          @id @default(autoincrement())
  name          String
  description   String
  age           String
  alignment     Alignment
  size          Size
  speed         Int
  languages     Language[]
  darkVision    Int
  subRaces      SubRace[]
  traits        Traits[]
  ContentPack   ContentPack? @relation(fields: [contentPackId], references: [id])
  contentPackId Int?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  Character     Character[]
}

model Traits {
  // Specific Named abilities that provide a preset buff/array of buffs
  id          Int      @id @default(autoincrement())
  name        String
  description String
  buffs       Buff[]
  Race        Race?    @relation(fields: [raceId], references: [id])
  raceId      Int?
  SubRace     SubRace? @relation(fields: [subRaceId], references: [id])
  subRaceId   Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Buff {
  // Simple Buffs that can be applied to a character
  // This includes giving a proficiency in a skill, a saving throw, or a tool. Bonus to a stat, or a bonus to AC, or advantage/bonus on specific rolls.
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Traits    Traits?  @relation(fields: [traitsId], references: [id])
  traitsId  Int?
}

model SubRace {
  id        Int         @id @default(autoincrement())
  name      String
  traits    Traits[]
  Race      Race?       @relation(fields: [raceId], references: [id])
  raceId    Int?
  Character Character[]
}

model Maps {
  id            Int          @id @default(autoincrement())
  name          String
  ContentPack   ContentPack? @relation(fields: [contentPackId], references: [id])
  contentPackId Int?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Tools {
  id        Int      @id @default(autoincrement())
  name      String
  cost      String
  weight    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Class     Class?   @relation(fields: [classId], references: [id])
  classId   Int?
}

model ContentPack {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  default     Boolean      @default(false) //If true, signup  will automatically add this content pack to the user
  monsters    Monster[]
  spells      Spell[]
  classes     Class[]
  subClasses  SubClass[]
  backgrounds Background[]
  races       Race[]
  feat        Feat[]
  equipment   Equipment[]
  maps        Maps[]
  user        User?        @relation(fields: [userId], references: [id])
  userId      Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Features    Features[]
}
